<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generate on go-swagger toolkit</title>
    <link>http://go-swagger.github.io/categories/generate/</link>
    <description>Recent content in Generate on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 go-swagger contributors</copyright>
    <lastBuildDate>Mon, 09 Nov 2015 18:58:47 -0800</lastBuildDate>
    <atom:link href="http://go-swagger.github.io/categories/generate/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>spec</title>
      <link>http://go-swagger.github.io/generate/spec/</link>
      <pubDate>Mon, 09 Nov 2015 18:58:47 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a swagger spec document from your code.&lt;/p&gt;

&lt;h2 id=&#34;usage:958e7270f96f5407d7d980f500805b1b&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To generate a spec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate spec -o ./swagger.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You give it a main file and it will parse all the files that are required by that main
package to produce a swagger specification.&lt;/p&gt;

&lt;p&gt;To use you can add a go:generate comment to your main file for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//go:generate swagger generate spec
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;possible-annotations:958e7270f96f5407d7d980f500805b1b&#34;&gt;Possible annotations&lt;/h3&gt;

&lt;h4 id=&#34;swagger-meta:958e7270f96f5407d7d980f500805b1b&#34;&gt;swagger:meta&lt;/h4&gt;

&lt;p&gt;The &lt;strong&gt;swagger:meta&lt;/strong&gt; annotation flags a file as source for metadata about the API.
This is typically a doc.go file with your package documentation.&lt;/p&gt;

&lt;p&gt;You can specify a Consumes and Produces key which has a new content type on each line
Schemes is a tag that is required and allows for a comma separated string composed of:
http, https, ws or wss&lt;/p&gt;

&lt;p&gt;Host and BasePath can be specified but those values will be defaults,
they should get substituted when serving the swagger spec.&lt;/p&gt;

&lt;p&gt;Default parameters and responses are not supported at this stage, for those you can edit the template json.&lt;/p&gt;

&lt;h4 id=&#34;swagger-strfmt:958e7270f96f5407d7d980f500805b1b&#34;&gt;swagger:strfmt&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;swagger:strfmt [name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;strong&gt;swagger:strfmt&lt;/strong&gt; annotation names a type as a string formatter. The name is mandatory and that is
what will be used as format name for this particular string format.
String formats should only be used for very well known formats.&lt;/p&gt;

&lt;h4 id=&#34;swagger-model:958e7270f96f5407d7d980f500805b1b&#34;&gt;swagger:model&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;swagger:model [?model name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;strong&gt;swagger:model&lt;/strong&gt; annotation optionally gets a model name as extra data on the line.
when this appears anywhere in a comment for a struct, then that struct becomes a schema
in the definitions object of swagger.&lt;/p&gt;

&lt;p&gt;The struct gets analyzed and all the collected models are added to the tree.
The refs are tracked separately so that they can be renamed later on.&lt;/p&gt;

&lt;h4 id=&#34;swagger-route:958e7270f96f5407d7d980f500805b1b&#34;&gt;swagger:route&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;swagger:route [method] [path pattern] [operation id] [?tag1 tag2 tag3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;strong&gt;swagger:route&lt;/strong&gt; annotation links a path to a method.
This operation gets a unique id, which is used in various places as method name.
One such usage is in method names for client generation for example.&lt;/p&gt;

&lt;p&gt;Because there are many routers available, this tool does not try to parse the paths
you provided to your routing library of choice. So you have to specify your path pattern
yourself in valid swagger syntax.&lt;/p&gt;

&lt;h4 id=&#34;swagger-params:958e7270f96f5407d7d980f500805b1b&#34;&gt;swagger:params&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;swagger:params [operationid1 operationid2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Links a struct to one or more operations. The params in the resulting swagger spec can be composed of several structs.
There are no guarantees given on how property name overlaps are resolved when several structs apply to the same operation.
This tag works very similar to the swagger:model tag except that it produces valid parameter objects instead of schema
objects.&lt;/p&gt;

&lt;h4 id=&#34;swagger-response:958e7270f96f5407d7d980f500805b1b&#34;&gt;swagger:response&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;swagger:response [?response name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reads a struct decorated with &lt;strong&gt;swagger:response&lt;/strong&gt; and uses that information to fill up the headers and the schema for a response.
A swagger:route can specify a response name for a status code and then the matching response will be used for that operation in the swagger definition.&lt;/p&gt;

&lt;h4 id=&#34;swagger-allof:958e7270f96f5407d7d980f500805b1b&#34;&gt;swagger:allOf&lt;/h4&gt;

&lt;p&gt;Marks an embedded type as  a member for allOf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// An AllOfModel is composed out of embedded structs but it should build
// an allOf property
type AllOfModel struct {
	// swagger:allOf
	SimpleOne
	// swagger:allOf
	mods.Notable

	Something // not annotated with anything, so should be included

	CreatedAt strfmt.DateTime `json:&amp;quot;createdAt&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Generate an API client</title>
      <link>http://go-swagger.github.io/generate/client/</link>
      <pubDate>Fri, 23 Oct 2015 22:11:54 -0700</pubDate>
      
      <guid>http://go-swagger.github.io/generate/client/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a client.&lt;/p&gt;

&lt;h2 id=&#34;usage:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To generate a client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate client -f [http-url|filepath] -A [application-name] [--principal [principal-name]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To then use the client with a HTTP transport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;https://raw.githubusercontent.com/go-swagger/go-swagger/master/examples/todo-list/swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the API client
  client := apiclient.New(httptransport.New(doc), strfmt.Default)

  // make the request to get all items
  resp, err := client.Operations.All(operations.AllParams{})
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;authentication:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;The client supports 3 authentication schemes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Auth&lt;/li&gt;
&lt;li&gt;API key auth in header or query&lt;/li&gt;
&lt;li&gt;Bearer token header for oauth2&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;./swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the API client
  client := apiclient.New(httptransport.New(doc), strfmt.Default)

  // make the authenticated request to get all items
  bearerTokenAuth := httptransport.BearerToken(os.Getenv(&amp;quot;API_ACCESS_TOKEN&amp;quot;))
  resp, err := client.Operations.All(operations.AllParams{}, bearerTokenAuth)
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>_index</title>
      <link>http://go-swagger.github.io/_index/</link>
      <pubDate>Wed, 21 Oct 2015 22:46:51 -0700</pubDate>
      
      <guid>http://go-swagger.github.io/_index/</guid>
      <description>

&lt;h1 id=&#34;swagger-2-0-circle-ci-https-circleci-com-gh-go-swagger-go-swagger-tree-master-svg-style-svg-https-circleci-com-gh-go-swagger-go-swagger-tree-master-slack-status-https-slackin-goswagger-io-badge-svg-https-slackin-goswagger-io:3976528693a0108357f4928017600865&#34;&gt;Swagger 2.0 &lt;a href=&#34;https://circleci.com/gh/go-swagger/go-swagger/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/go-swagger/go-swagger/tree/master.svg?style=svg&#34; alt=&#34;Circle CI&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://slackin.goswagger.io&#34;&gt;&lt;img src=&#34;https://slackin.goswagger.io/badge.svg&#34; alt=&#34;Slack Status&#34; /&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swagger-api/swagger-spec/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-Apache%20v2-orange.svg&#34; alt=&#34;license&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/go-swagger/go-swagger&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-swagger/go-swagger?status.svg&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This API is not stable yet, when it is stable it will be distributed over gopkg.in&lt;/p&gt;

&lt;p&gt;There is a code coverage report available in the artifacts section of a build. Unfortunately using coveralls made the
build unstable.&lt;/p&gt;

&lt;p&gt;Contains an implementation of Swagger 2.0. It knows how to serialize and deserialize swagger specifications.&lt;/p&gt;

&lt;p&gt;Swagger is a simple yet powerful representation of your RESTful API.&lt;br /&gt;
With the largest ecosystem of API tooling on the planet, thousands of developers are supporting Swagger in almost every modern programming language and deployment environment.&lt;/p&gt;

&lt;p&gt;With a Swagger-enabled API, you get interactive documentation, client SDK generation and discoverability. We created Swagger to help fulfill the promise of APIs.&lt;/p&gt;

&lt;p&gt;Swagger helps companies like Apigee, Getty Images, Intuit, LivingSocial, McKesson, Microsoft, Morningstar, and PayPal build the best possible services with RESTful APIs. Now in version 2.0, Swagger is more enabling than ever. And it&amp;rsquo;s 100% open source software.&lt;/p&gt;

&lt;h2 id=&#34;docs:3976528693a0108357f4928017600865&#34;&gt;Docs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/github.com/go-swagger/go-swagger&#34;&gt;http://godoc.org/github.com/go-swagger/go-swagger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u github.com/go-swagger/go-swagger/cmd/swagger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The implementation also provides a number of command line tools to help working with swagger.&lt;/p&gt;

&lt;p&gt;Currently there is a spec validator tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate a server for a swagger spec document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate server [-f ./swagger.json] -A [application-name [--principal [principal-name]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate a client for a swagger spec document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate client [-f ./swagger.json] -A [application-name [--principal [principal-name]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To generate a swagger spec document for a go application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate spec -o ./swagger.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much improved documentation is in the works and will actually explain how to use this tool in much more depth.
To learn about which annotations are available and how to use them for generating a spec from any go application
(generating a spec is not opinionated), you can take a look at the files used for &lt;a href=&#34;https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification&#34;&gt;testing the parser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are several other sub commands available for the generate command&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sub command &amp;nbsp;&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;operation&lt;/td&gt;
&lt;td&gt;generates one or more operations specified in the swagger definition&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;model&lt;/td&gt;
&lt;td&gt;generates model files for one or more models specified in the swagger definition&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;support&lt;/td&gt;
&lt;td&gt;generates the api builder and the main method&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;server&lt;/td&gt;
&lt;td&gt;generates an entire server application&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;client&lt;/td&gt;
&lt;td&gt;generates a client for a swagger specification&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;spec&lt;/td&gt;
&lt;td&gt;generates a swagger spec document based on go code&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;design:3976528693a0108357f4928017600865&#34;&gt;Design&lt;/h2&gt;

&lt;p&gt;For now what exists of documentation on how all the pieces fit together, is described in this &lt;a href=&#34;design.md&#34;&gt;doc&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-inside:3976528693a0108357f4928017600865&#34;&gt;What&amp;rsquo;s inside?&lt;/h2&gt;

&lt;p&gt;For a V1 I want to have this feature set completed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Documentation site&lt;/li&gt;
&lt;li&gt;[x] Play nice with golint, go vet etc.&lt;/li&gt;
&lt;li&gt;[x] An object model that serializes to swagger yaml or json&lt;/li&gt;
&lt;li&gt;[x] A tool to work with swagger:

&lt;ul&gt;
&lt;li&gt;[x] validate a swagger spec document:&lt;/li&gt;
&lt;li&gt;[x] validate against jsonschema&lt;/li&gt;
&lt;li&gt;[ ] validate extra rules outlined &lt;a href=&#34;https://github.com/apigee-127/swagger-tools/blob/master/docs/Swagger_Validation.md&#34;&gt;here&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[x] definition can&amp;rsquo;t declare a property that&amp;rsquo;s already defined by one of its ancestors (Error)&lt;/li&gt;
&lt;li&gt;[x] definition&amp;rsquo;s ancestor can&amp;rsquo;t be a descendant of the same model (Error)&lt;/li&gt;
&lt;li&gt;[x] each api path should be non-verbatim (account for path param names) unique per method (Error)&lt;/li&gt;
&lt;li&gt;[ ] each security reference should contain only unique scopes (Warning)&lt;/li&gt;
&lt;li&gt;[ ] each security scope in a security definition should be unique (Warning)&lt;/li&gt;
&lt;li&gt;[x] each path parameter should correspond to a parameter placeholder and vice versa (Error)&lt;/li&gt;
&lt;li&gt;[ ] each referencable definition must have references (Warning)&lt;/li&gt;
&lt;li&gt;[x] each definition property listed in the required array must be defined in the properties of the model (Error)&lt;/li&gt;
&lt;li&gt;[x] each parameter should have a unique &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; combination (Error)&lt;/li&gt;
&lt;li&gt;[x] each operation should have only 1 parameter of type body (Error)&lt;/li&gt;
&lt;li&gt;[x] each reference must point to a valid object (Error)&lt;/li&gt;
&lt;li&gt;[x] every default value that is specified must validate against the schema for that property (Error)&lt;/li&gt;
&lt;li&gt;[x] every example that is specified must validate against the schema for that property (Error)&lt;/li&gt;
&lt;li&gt;[x] items property is required for all schemas/definitions of type &lt;code&gt;array&lt;/code&gt; (Error)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[x] serve swagger UI for any swagger spec file&lt;/li&gt;
&lt;li&gt;[x] code generation&lt;/li&gt;
&lt;li&gt;[x] generate api based on swagger spec&lt;/li&gt;
&lt;li&gt;[x] generate go client from a swagger spec&lt;/li&gt;
&lt;li&gt;[x] spec generation&lt;/li&gt;
&lt;li&gt;[x] generate spec document based on the code

&lt;ul&gt;
&lt;li&gt;[x] generate meta data (top level swagger properties) from package docs&lt;/li&gt;
&lt;li&gt;[x] generate definition entries for models&lt;/li&gt;
&lt;li&gt;[x] support composed structs out of several embeds&lt;/li&gt;
&lt;li&gt;[x] support allOf for composed structs&lt;/li&gt;
&lt;li&gt;[x] generate path entries for routes&lt;/li&gt;
&lt;li&gt;[x] generate responses from structs&lt;/li&gt;
&lt;li&gt;[x] support composed structs out of several embeds&lt;/li&gt;
&lt;li&gt;[x] generate parameters from structs&lt;/li&gt;
&lt;li&gt;[x] support composed structs out of several embeds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[x] Middlewares:

&lt;ul&gt;
&lt;li&gt;[x] serve spec&lt;/li&gt;
&lt;li&gt;[x] routing&lt;/li&gt;
&lt;li&gt;[x] validation&lt;/li&gt;
&lt;li&gt;[x] additional validation through an interface&lt;/li&gt;
&lt;li&gt;[x] authorization

&lt;ul&gt;
&lt;li&gt;[x] basic auth&lt;/li&gt;
&lt;li&gt;[x] api key auth&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[x] swagger docs UI&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[x] Typed JSON Schema implementation

&lt;ul&gt;
&lt;li&gt;[x] JSON Pointer that knows about structs&lt;/li&gt;
&lt;li&gt;[x] JSON Reference that knows about structs&lt;/li&gt;
&lt;li&gt;[x] Passes current json schema test suite&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[x] extended string formats

&lt;ul&gt;
&lt;li&gt;[x] uuid, uuid3, uuid4, uuid5&lt;/li&gt;
&lt;li&gt;[x] email&lt;/li&gt;
&lt;li&gt;[x] uri (absolute)&lt;/li&gt;
&lt;li&gt;[x] hostname&lt;/li&gt;
&lt;li&gt;[x] ipv4&lt;/li&gt;
&lt;li&gt;[x] ipv6&lt;/li&gt;
&lt;li&gt;[x] credit card&lt;/li&gt;
&lt;li&gt;[x] isbn, isbn10, isbn13&lt;/li&gt;
&lt;li&gt;[x] social security number&lt;/li&gt;
&lt;li&gt;[x] hexcolor&lt;/li&gt;
&lt;li&gt;[x] rgbcolor&lt;/li&gt;
&lt;li&gt;[x] date&lt;/li&gt;
&lt;li&gt;[x] date-time&lt;/li&gt;
&lt;li&gt;[x] duration&lt;/li&gt;
&lt;li&gt;[x] password&lt;/li&gt;
&lt;li&gt;[x] custom string formats&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;later:3976528693a0108357f4928017600865&#34;&gt;Later&lt;/h2&gt;

&lt;p&gt;After the v1 implementation extra transports are on the roadmap.&lt;/p&gt;

&lt;p&gt;Many of these fall under the maybe, perhaps, could be nice to have, might not happen bucket:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Formats:

&lt;ul&gt;
&lt;li&gt;[ ] custom serializer for XML to support namespaces and prefixes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tools:

&lt;ul&gt;
&lt;li&gt;Code generation:&lt;/li&gt;
&lt;li&gt;[ ] generate &amp;ldquo;sensible&amp;rdquo; random data based on swagger spec&lt;/li&gt;
&lt;li&gt;[ ] generate tests based on swagger spec for client&lt;/li&gt;
&lt;li&gt;[ ] generate tests based on swagger spec for server&lt;/li&gt;
&lt;li&gt;[ ] generate markdown representation of swagger spec&lt;/li&gt;
&lt;li&gt;[ ] watch swagger spec file and regenerate when modified&lt;/li&gt;
&lt;li&gt;Spec generation:&lt;/li&gt;
&lt;li&gt;[ ] watch application folders and regenerate the swagger document&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Middlewares:

&lt;ul&gt;
&lt;li&gt;[ ] swagger editor&lt;/li&gt;
&lt;li&gt;[ ] swagger UI&lt;/li&gt;
&lt;li&gt;[ ] authorization:

&lt;ul&gt;
&lt;li&gt;[ ] oauth2

&lt;ul&gt;
&lt;li&gt;[ ] implicit&lt;/li&gt;
&lt;li&gt;[ ] access code&lt;/li&gt;
&lt;li&gt;[ ] password&lt;/li&gt;
&lt;li&gt;[ ] application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Transports:

&lt;ul&gt;
&lt;li&gt;[ ] swagger socket (swagger over tcp sockets)&lt;/li&gt;
&lt;li&gt;[ ] swagger websocket (swagger over websockets)&lt;/li&gt;
&lt;li&gt;[ ] swagger proxy (assemble several backend apis into a single swagger spec and route the requests)&lt;/li&gt;
&lt;li&gt;[ ] swagger discovery (repository for swagger specifications)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://go-swagger.github.io/about/</link>
      <pubDate>Wed, 21 Oct 2015 21:54:47 -0700</pubDate>
      
      <guid>http://go-swagger.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;about:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;There are 3 axis along which your API and its documentation matter.
The first one is an artefact of that first meeting where you hash out what your service will do. Hopefully you&amp;rsquo;ve come
up with some document that services as a kind of contract for what the affected people/teams will need to do.
At this stage you want to be able to generate a server, perhaps a client to talk to that server.
It&amp;rsquo;s not inconceivable you want to have your frontend team use mock data for that server and that the backend team
wants to be left in peace while they work on their part of the application.&lt;/p&gt;

&lt;p&gt;This is the design first approach for swagger.&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;re moving on to the second iteration of the project and at this stage, there might be a design meeting for the
new features, or they might just be refinements of the previous API&amp;rsquo;s. When no changes are required to the contract,
all is great because people can keep doing what they were doing and everybody is happy.
However it might be that there was a change that is required for the frontend, they need a boolean added to some model
because they want to display an-accepted-terms-and-conditions-checkbox.
The backend can decide to add this to the code, provide the necessary annotation and regenerate the swagger
specification document.&lt;/p&gt;

&lt;p&gt;This is the code first approach for swagger.&lt;/p&gt;

&lt;p&gt;This toolkit aims to support both these modes, remove the repetitive nature of writing what is essentially boilerplate
code. In doing so it tries to stay as close as possible to the go stdlib interfaces, it tries to have no opinons
besides the fact that documentation is important. And it tries to integrate well with the rest of the go ecosystem as
well as the swagger ecosystem.&lt;/p&gt;

&lt;p&gt;A series of contrib projects will add higher level optional functionality so that you can use the generated code with
confidence whether your application is your personal blog or is the next AWS.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>