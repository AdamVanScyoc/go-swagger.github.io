<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operations on go-swagger toolkit</title>
    <link>//goswagger.io/tags/operations/</link>
    <description>Recent content in Operations on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 go-swagger contributors</copyright>
    <lastBuildDate>Sat, 14 Nov 2015 20:10:39 -0800</lastBuildDate>
    <atom:link href="//goswagger.io/tags/operations/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>swagger:route</title>
      <link>//goswagger.io/generate/spec/route/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:39 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/route/</guid>
      <description>

&lt;p&gt;A &lt;strong&gt;swagger:route&lt;/strong&gt; annotation links a path to a method.
This operation gets a unique id, which is used in various places as method name.
One such usage is in method names for client generation for example.&lt;/p&gt;

&lt;p&gt;Because there are many routers available, this tool does not try to parse the paths
you provided to your routing library of choice. So you have to specify your path pattern
yourself in valid swagger syntax.&lt;/p&gt;

&lt;h5 id=&#34;syntax:657749a60c6862d2709238cb94541743&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:route [method] [path pattern] [?tag1 tag2 tag3] [operation id]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:657749a60c6862d2709238cb94541743&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific mime type values, one per line, for the content the API receives&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Produces&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific mime type values, one per line, for the conten the API sends&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Schemes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific schemes the API accept (possible values: http, https, ws, wss) https is preferred as default when configured&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a dictionary of key: []string{scopes}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Responses&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a dictionary of status code to named response&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:657749a60c6862d2709238cb94541743&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ServeAPI serves the API for this record store
func ServeAPI(host, basePath string, schemes []string) error {

	// swagger:route GET /pets listPets pets users
	//
	// Lists pets filtered by some parameters.
	//
	// This will show all available pets by default.
	// You can get the pets that are out of stock
	//
	//     Consumes:
	//     - application/json
	//     - application/x-protobuf
	//
	//     Produces:
	//     - application/json
	//     - application/x-protobuf
	//
	//     Schemes: http, https, ws, wss
	//
	//     Security:
	//       api_key:
	//       oauth: read, write
	//
	//     Responses:
	//       default: genericError
	//       200: someResponse
	//       422: validationError
	mountItem(&amp;quot;GET&amp;quot;, basePath+&amp;quot;/pets&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:657749a60c6862d2709238cb94541743&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
operations:
  &amp;quot;/&amp;quot;:
    get:
      operationId: listPets
      tags:
      - pets
      - users
      consumes:
      - application/json
      - application/x-protobuf
      produces:
      - application/json
      - application/x-protobuf
      schemes:
      - http
      - https
      - ws
      - wss
      security:
        api_key: []
        oauth:
        - read
        - write
      responses:
        default:
          $ref: &amp;quot;#/responses/genericError&amp;quot;
        200:
          $ref: &amp;quot;#/responses/someResponse&amp;quot;
        422:
          $ref: &amp;quot;#/responses/validationError&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:parameters</title>
      <link>//goswagger.io/generate/spec/params/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:43 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/params/</guid>
      <description>

&lt;p&gt;The &lt;strong&gt;swagger:parameters&lt;/strong&gt; annotation links a struct to one or more operations. The parameters in the resulting swagger spec can be composed of several structs.
There are no guarantees given on how property name overlaps are resolved when several structs apply to the same operation.
This tag works very similar to the swagger:model tag except that it produces valid parameter objects instead of schema
objects.&lt;/p&gt;

&lt;p&gt;When this appears anywhere in a comment for a struct, then that struct becomes a schema
in the definitions object of swagger.&lt;/p&gt;

&lt;p&gt;The struct gets analyzed and all the collected models are added to the tree.
The refs are tracked separately so that they can be renamed later on.&lt;/p&gt;

&lt;p&gt;At this moment the parameters require one or more structs to be defined, it&amp;rsquo;s not possible to annotate plain var
entries at this moment.&lt;/p&gt;

&lt;h5 id=&#34;syntax:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:parameters [operationid1 operationid2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Properties:&lt;/h5&gt;

&lt;p&gt;The fields of this struct can be decorated with a number of annotations. For the field name it uses the struct field
name, it respects the json struct field tag for customizing the name.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;In&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;where to find the parameter&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Collection Format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when a slice the formatter for the collection when serialized on the request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true this value needs to be present in the request&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// swagger:parameters listBars addBars
type BarSliceParam struct {
	// a BarSlice has bars which are strings
	//
	// min items: 3
	// max items: 10
	// unique: true
	// items.minItems: 4
	// items.maxItems: 9
	// items.items.minItems: 5
	// items.items.maxItems: 8
	// items.items.items.minLength: 3
	// items.items.items.maxLength: 10
	// items.items.items.pattern: \w+
	// collection format: pipe
	// in: query
	BarSlice [][][]string `json:&amp;quot;bar_slice&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
operations:
  &amp;quot;/&amp;quot;:
    get:
      operationId: listBars
      parameters:
        - name: bar_slice
          in: query
          maxItems: 10
          minItems: 3
          unique: true
          collectionFormat: pipe
          type: array
          items:
            type: array
            maxItems: 9
            minItems: 4
            items:
              type: array
              maxItems: 8
              minItems: 5
              items:
                type: string
                minLength: 3
                maxLength: 10
                pattern: &amp;quot;\\w+&amp;quot;
    post:
      operationId: addBars
      parameters:
        - name: bar_slice
          in: query
          maxItems: 10
          minItems: 3
          unique: true
          collectionFormat: pipe
          type: array
          items:
            type: array
            maxItems: 9
            minItems: 4
            items:
              type: array
              maxItems: 8
              minItems: 5
              items:
                type: string
                minLength: 3
                maxLength: 10
                pattern: &amp;quot;\\w+&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:response</title>
      <link>//goswagger.io/generate/spec/response/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:52 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/response/</guid>
      <description>

&lt;p&gt;Reads a struct decorated with &lt;strong&gt;swagger:response&lt;/strong&gt; and uses that information to fill up the headers and the schema for a response.
A swagger:route can specify a response name for a status code and then the matching response will be used for that operation in the swagger definition.&lt;/p&gt;

&lt;h5 id=&#34;syntax:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:response [?response name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Collection Format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when a slice the formatter for the collection when serialized on the request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A ValidationError is an error that is used when the required input fails validation.
// swagger:response validationError
type ValidationError struct {
	// The error message
	// in: body
	Body struct {
		// The validation message
		// 
		// Required: true
		Message string
		// An optional field name to which this validation applies
		FieldName string
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
responses:
  validationError:
    description: A validation error is an errot that is used whn the required input fails validation.
    schema:
      type: object
      required: 
      - Message
      properties:
        Message:
          type: string
          description: The validation message
        FieldName:
          type: string
          description: an optional field name to which this validation applies
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>