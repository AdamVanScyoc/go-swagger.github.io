<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Polymorphism on go-swagger toolkit</title>
    <link>//goswagger.io/tags/polymorphism/</link>
    <description>Recent content in Polymorphism on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 go-swagger contributors</copyright>
    <lastBuildDate>Sat, 14 Nov 2015 20:10:58 -0800</lastBuildDate>
    <atom:link href="//goswagger.io/tags/polymorphism/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>swagger:allOf</title>
      <link>//goswagger.io/generate/spec/allOf/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:58 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/allOf/</guid>
      <description>

&lt;p&gt;Marks an embedded type as  a member for allOf&lt;/p&gt;

&lt;h5 id=&#34;syntax&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:allOf
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;example&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A SimpleOne is a model with a few simple fields
type SimpleOne struct {
	ID   int64  `json:&amp;quot;id&amp;quot;`
	Name string `json:&amp;quot;name&amp;quot;`
	Age  int32  `json:&amp;quot;age&amp;quot;`
}

// A Something struct is used by other structs
type Something struct {
	DID int64  `json:&amp;quot;did&amp;quot;`
	Cat string `json:&amp;quot;cat&amp;quot;`
}

// Notable is a model in a transitive package.
// it&#39;s used for embedding in another model
//
// swagger:model withNotes
type Notable struct {
	Notes string `json:&amp;quot;notes&amp;quot;`

	Extra string `json:&amp;quot;extra&amp;quot;`
}

// An AllOfModel is composed out of embedded structs but it should build
// an allOf property
type AllOfModel struct {
	// swagger:allOf
	SimpleOne
	// swagger:allOf
	mods.Notable

	Something // not annotated with anything, so should be included

	CreatedAt strfmt.DateTime `json:&amp;quot;createdAt&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  SimpleOne:
    title: A SimpleOne is a model with a few simple fields
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      age:
        type: integer
        format: int32
  Notable:
    title: &amp;quot;Notable is a model in a transitive package.\nit&#39;s used for embedding in another model&amp;quot;
    type: object
    properties:
      notes:
        type: string
      extra:
        type: string
  AllOfModel:
    title: &amp;quot;An AllOfModel is composed out of embedded structs but it should build\nan allOf property&amp;quot;
    allOf: 
      - $ref: &amp;quot;#/definitions/SimpleOne&amp;quot;
      - $ref: &amp;quot;#/definitions/Notable&amp;quot;
      - title: A Something struct is used by other structs
        type: object
        properties:
          did:
            type: integer
            format: int64
          cat:
            type: string
      - type: object
        properties:
          createdAt:
            type: string
            format: date-time
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:discriminated</title>
      <link>//goswagger.io/generate/spec/discriminated/</link>
      <pubDate>Sat, 12 Dec 2015 20:24:52 -0800</pubDate>
      
      <guid>//goswagger.io/generate/spec/discriminated/</guid>
      <description>

&lt;p&gt;Marks an embedded type as  a member for allOf and sets the x-class value. On interface definitions there is another annotation on methods allowed &lt;em&gt;swagger:name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The swagger:allOf annotation can be followed by a string. This string will be the value for the &lt;code&gt;x-class&lt;/code&gt; vendor extension. This value is used as constant for the discriminator field.&lt;/p&gt;

&lt;p&gt;An interface that is embedded expects to have 1 method that is commented with &lt;code&gt;Discriminator: true&lt;/code&gt;. That field will be used as discriminator field when marshalling/unmarshalling objects.&lt;/p&gt;

&lt;p&gt;Because this is for use with interfaces we can&amp;rsquo;t make use of the json struct tag to allow for spec name overriding. So instead you can annotate method names on an interface with swagger:name and a value this will then provide the json field name.&lt;/p&gt;

&lt;h5 id=&#34;syntax&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:allOf org.example.something.TypeName
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;example&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// TeslaCar is a tesla car
//
// swagger:model
type TeslaCar interface {
	// The model of tesla car
	//
	// discriminator: true
	// swagger:name model
	Model() string

	// AutoPilot returns true when it supports autopilot
	// swagger:name autoPilot
	AutoPilot() bool
}

// The ModelS version of the tesla car
//
// swagger:model modelS
type ModelS struct {
	// swagger:allOf com.tesla.models.ModelS
	TeslaCar
	// The edition of this Model S
	Edition string `json:&amp;quot;edition&amp;quot;`
}

// The ModelX version of the tesla car
//
// swagger:model modelX
type ModelX struct {
	// swagger:allOf com.tesla.models.ModelX
	TeslaCar
	// The number of doors on this Model X
	Doors int32 `json:&amp;quot;doors&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  TeslaCar:
    title: TeslaCar is a tesla car
    type: object
    discriminator: &amp;quot;model&amp;quot;
    properties:
      model:
        description: The model of tesla car
        type: string
        x-go-name: Model
      autoPilot:
        description: AutoPilot returns true when it supports autopilot
        type: integer
        format: int32
        x-go-name: AutoPilot
  modelS:
    allOf:
      - $ref: &amp;quot;#/definitions/TeslaCar&amp;quot;
      - title: The ModelS version of the tesla car
        properties:
          edition:
            description: &amp;quot;The edition of this model S&amp;quot;
            type: string
            x-go-name: Edition
        x-class: &amp;quot;com.tesla.models.ModelS&amp;quot;
        x-go-name: &amp;quot;ModelX&amp;quot;
  modelX:
    allOf:
      - $ref: &amp;quot;#/definitions/TeslaCar&amp;quot;
      - title: The ModelX version of the tesla car
        properties:
          doors:
            description: &amp;quot;The number of doors on this Model X&amp;quot;
            type: integer
            format: int32
            x-go-name: Doors
        x-class: &amp;quot;com.tesla.models.ModelX&amp;quot;
        x-go-name: ModelX
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>